{"version":3,"sources":["redux.js","Components/Form.js","Components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["persistConfig","key","storage","initialState","todos","id","uuid","name","complete","persistedReducer","persistReducer","state","action","type","payload","map","todo","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","f","persistor","persistStore","connect","addTodoAction","props","useState","setTodo","onSubmit","event","preventDefault","className","placeholder","value","onChange","target","toggleTodoComplete","todoId","deleteTodoAction","toggleComplete","deleteTodo","checked","bind","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ffafaac.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst initialState = {\r\n  todos: [\r\n    {\r\n      id: uuid(),\r\n      name: \"Read a bit\",\r\n      complete: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: \"Do laundry\",\r\n      complete: false,\r\n    },\r\n  ],\r\n};\r\n\r\n// Persisted Reducer\r\nconst persistedReducer = persistReducer(persistConfig, reducer);\r\n\r\n// Actions\r\nexport const addTodoAction = (todo) => ({\r\n  type: \"ADD_TODO\",\r\n  payload: todo,\r\n});\r\n\r\nexport const toggleTodoComplete = (todoId) => ({\r\n  type: \"TOGGLE_TODO\",\r\n  payload: todoId,\r\n});\r\n\r\nexport const deleteTodoAction = (todoId) => ({\r\n  type: \"DELETE_TODO\",\r\n  payload: todoId,\r\n});\r\n\r\n// Reducer\r\nexport function reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload],\r\n      };\r\n    case \"TOGGLE_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) =>\r\n          todo.id === action.payload\r\n            ? {\r\n                ...todo,\r\n                complete: !todo.complete,\r\n              }\r\n            : todo\r\n        ),\r\n      };\r\n    case \"DELETE_TODO\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  initialState,\r\n  typeof window === \"object\" &&\r\n    typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    : (f) => f\r\n);\r\nexport const persistor = persistStore(store);\r\n","import React, { useState } from 'react';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport { addTodoAction } from '../redux';\r\n\r\nconst TodoInput = (props) => {\r\n  const [todo, setTodo] = useState('');\r\n\r\n  const onChange = (event) => {\r\n    setTodo(event.target.value);\r\n  };\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.addTodoAction({\r\n      id: uuid(),\r\n      name: todo,\r\n      complete: false\r\n    });\r\n    setTodo('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <div className=\"form-div\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          placeholder=\"Add a todo\"\r\n          value={todo}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">Add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addTodoAction }\r\n)(TodoInput);\r\n","import React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { toggleTodoComplete, deleteTodoAction } from \"../redux\";\r\n\r\nconst TodoList = (props) => {\r\n  const { todos } = props;\r\n\r\n  const toggleComplete = (todoId) => {\r\n    props.toggleTodoComplete(todoId);\r\n  };\r\n  const deleteTodo = (todoId) => {\r\n    props.deleteTodoAction(todoId);\r\n  };\r\n\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {todos.map((todo) => (\r\n        <li key={todo.id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={todo.complete}\r\n            onChange={toggleComplete.bind(null, todo.id)}\r\n          />\r\n          <span className={todo.complete ? \"complete\" : null}>{todo.name}</span>\r\n          <span\r\n            className=\"delete-button\"\r\n            onClick={deleteTodo.bind(null, todo.id)}\r\n          >\r\n            X\r\n          </span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  toggleTodoComplete,\r\n  deleteTodoAction,\r\n})(TodoList);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport {store,persistor} from './redux';\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\n// Components\r\nimport TodoInput from \"./Components/Form\";\r\nimport TodoList from \"./Components/ToDoList\";\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <div className=\"main\">\r\n      <header className=\"main\">To Do List</header>\r\n      <PersistGate persistor={persistor}>\r\n        <TodoInput />\r\n        <TodoList />\r\n      </PersistGate>\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}